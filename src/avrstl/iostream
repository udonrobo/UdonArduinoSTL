/*	Copyright (C) 2004 Garrett A. Kajmowicz

        This file is part of the uClibc++ Library.

        This library is free software; you can redistribute it and/or
        modify it under the terms of the GNU Lesser General Public
        License as published by the Free Software Foundation; either
        version 2.1 of the License, or (at your option) any later version.

        This library is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public
        License along with this library; if not, write to the Free Software
        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/

#include "basic_definitions"

#ifndef __HEADER_STD_IOSTREAM
#define __HEADER_STD_IOSTREAM 1

#include "ios"
#include "iosfwd"
#include "istream"
#include "ostream"

#ifndef __AVR__
#include "fstream"
#include "string_iostream"
#endif

#pragma GCC visibility push(default)

namespace std {
#ifdef __UCLIBCXX_SUPPORT_CIN__
extern istream cin;
#endif
#ifdef __UCLIBCXX_SUPPORT_COUT__
extern ostream cout;
#endif
#ifdef __UCLIBCXX_SUPPORT_CERR__
extern ostream cerr;
#endif
#ifdef __UCLIBCXX_SUPPORT_CLOG__
extern ostream clog;
#endif
#ifdef __UCLIBCXX_SUPPORT_WCIN__
extern wistream wcin;
#endif
#ifdef __UCLIBCXX_SUPPORT_WCOUT__
extern wostream wcout;
#endif
#ifdef __UCLIBCXX_SUPPORT_WCERR__
extern wostream wcerr;
#endif
#ifdef __UCLIBCXX_SUPPORT_WCLOG__
extern wostream wclog;
#endif

template <class charT, class traits>
class _UCXXEXPORT basic_iostream : public basic_istream<charT, traits>,
                                   public basic_ostream<charT, traits> {
public:
  // constructor/destructor
  explicit _UCXXEXPORT basic_iostream(basic_streambuf<charT, traits> *sb);
  virtual _UCXXEXPORT ~basic_iostream(); // Below
};

template <class charT, class traits>
_UCXXEXPORT basic_iostream<charT, traits>::basic_iostream(
    basic_streambuf<charT, traits> *sb)
    : basic_ios<charT, traits>(sb), basic_istream<charT, traits>(sb),
      basic_ostream<charT, traits>(sb) {
  return;
}

template <class charT, class traits>
_UCXXEXPORT basic_iostream<charT, traits>::~basic_iostream() {
  return;
}

#ifdef __UCLIBCXX_EXPAND_OSTREAM_CHAR__
#ifdef __UCLIBCXX_EXPAND_ISTREAM_CHAR__
#ifndef __UCLIBCXX_COMPILE_IOSTREAM__

template <>
_UCXXEXPORT basic_iostream<char, char_traits<char>>::basic_iostream(
    basic_streambuf<char, char_traits<char>> *sb);
template <>
_UCXXEXPORT basic_iostream<char, char_traits<char>>::~basic_iostream();

#endif
#endif
#endif

// istream_iterator and ostream_iterator look very different if we're
// using new, templatized iostreams than if we're using the old cfront
// version.

#ifdef __STL_USE_NEW_IOSTREAMS

template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT>,
          class _Dist = ptrdiff_t>
class istream_iterator {
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

  typedef input_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef _Dist difference_type;
  typedef const _Tp *pointer;
  typedef const _Tp &reference;

  istream_iterator() : _M_stream(0), _M_ok(false) {}
  istream_iterator(istream_type &__s) : _M_stream(&__s) { _M_read(); }

  reference operator*() const { return _M_value; }
  pointer operator->() const { return &(operator*()); }

  istream_iterator &operator++() {
    _M_read();
    return *this;
  }
  istream_iterator operator++(int) {
    istream_iterator __tmp = *this;
    _M_read();
    return __tmp;
  }

  bool _M_equal(const istream_iterator &__x) const {
    return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);
  }

private:
  istream_type *_M_stream;
  _Tp _M_value;
  bool _M_ok;

  void _M_read() {
    _M_ok = (_M_stream && *_M_stream) ? true : false;
    if (_M_ok) {
      *_M_stream >> _M_value;
      _M_ok = *_M_stream ? true : false;
    }
  }
};

template <class _Tp, class _CharT, class _Traits, class _Dist>
inline bool
operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist> &__x,
           const istream_iterator<_Tp, _CharT, _Traits, _Dist> &__y) {
  return __x._M_equal(__y);
}

#ifdef __STL_FUNCTION_TMPL_PARTIAL_ORDER

template <class _Tp, class _CharT, class _Traits, class _Dist>
inline bool
operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist> &__x,
           const istream_iterator<_Tp, _CharT, _Traits, _Dist> &__y) {
  return !__x._M_equal(__y);
}

#endif /* __STL_FUNCTION_TMPL_PARTIAL_ORDER */

template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT>>
class ostream_iterator {
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

  typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;

  ostream_iterator(ostream_type &__s) : _M_stream(&__s), _M_string(0) {}
  ostream_iterator(ostream_type &__s, const _CharT *__c)
      : _M_stream(&__s), _M_string(__c) {}
  ostream_iterator<_Tp> &operator=(const _Tp &__value) {
    *_M_stream << __value;
    if (_M_string)
      *_M_stream << _M_string;
    return *this;
  }
  ostream_iterator<_Tp> &operator*() { return *this; }
  ostream_iterator<_Tp> &operator++() { return *this; }
  ostream_iterator<_Tp> &operator++(int) { return *this; }

private:
  ostream_type *_M_stream;
  const _CharT *_M_string;
};

// The default template argument is declared in iosfwd

// We do not read any characters until operator* is called.  The first
// time operator* is called, it calls getc.  Subsequent calls to getc
// return a cached character, and calls to operator++ use snextc.  Before
// operator* or operator++ has been called, _M_is_initialized is false.
template <class _CharT, class _Traits>
class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
                      _CharT *, _CharT &> {
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

public:
  istreambuf_iterator(streambuf_type *__p = 0) { this->_M_init(__p); }
  istreambuf_iterator(istream_type &__is) { this->_M_init(__is.rdbuf()); }

  char_type operator*() const {
    return _M_is_initialized ? _M_c : _M_dereference_aux();
  }

  istreambuf_iterator &operator++() {
    this->_M_nextc();
    return *this;
  }
  istreambuf_iterator operator++(int) {
    if (!_M_is_initialized)
      _M_postincr_aux();
    istreambuf_iterator __tmp = *this;
    this->_M_nextc();
    return __tmp;
  }

  bool equal(const istreambuf_iterator &__i) const {
    return this->_M_is_initialized && __i._M_is_initialized
               ? this->_M_eof == __i._M_eof
               : this->_M_equal_aux(__i);
  }

private:
  void _M_init(streambuf_type *__p) {
    _M_buf = __p;
    _M_eof = !__p;
    _M_is_initialized = _M_eof;
  }

  char_type _M_dereference_aux() const;
  bool _M_equal_aux(const istreambuf_iterator &) const;
  void _M_postincr_aux();

  void _M_nextc() {
    int_type __c = _M_buf->snextc();
    _M_c = traits_type::to_char_type(__c);
    _M_eof = traits_type::eq_int_type(__c, traits_type::eof());
    _M_is_initialized = true;
  }

  void _M_getc() const {
    int_type __c = _M_buf->sgetc();
    _M_c = traits_type::to_char_type(__c);
    _M_eof = traits_type::eq_int_type(__c, traits_type::eof());
    _M_is_initialized = true;
  }

private:
  streambuf_type *_M_buf;
  mutable _CharT _M_c;
  mutable bool _M_eof : 1;
  mutable bool _M_is_initialized : 1;
};

template <class _CharT, class _Traits>
_CharT istreambuf_iterator<_CharT, _Traits>::_M_dereference_aux() const {
  this->_M_getc();
  return _M_c;
}

template <class _CharT, class _Traits>
bool istreambuf_iterator<_CharT, _Traits>::_M_equal_aux(
    const istreambuf_iterator &__i) const {
  if (!this->_M_is_initialized)
    this->_M_getc();
  if (!__i._M_is_initialized)
    __i._M_getc();

  return this->_M_eof == __i._M_eof;
}

template <class _CharT, class _Traits>
void istreambuf_iterator<_CharT, _Traits>::_M_postincr_aux() {
  this->_M_getc();
}

template <class _CharT, class _Traits>
inline bool operator==(const istreambuf_iterator<_CharT, _Traits> &__x,
                       const istreambuf_iterator<_CharT, _Traits> &__y) {
  return __x.equal(__y);
}

#ifdef __STL_FUNCTION_TMPL_PARTIAL_ORDER

template <class _CharT, class _Traits>
inline bool operator!=(const istreambuf_iterator<_CharT, _Traits> &__x,
                       const istreambuf_iterator<_CharT, _Traits> &__y) {
  return !__x.equal(__y);
}

#endif /* __STL_FUNCTION_TMPL_PARTIAL_ORDER */

// The default template argument is declared in iosfwd
template <class _CharT, class _Traits>
class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void> {
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

public:
  ostreambuf_iterator(streambuf_type *__buf) : _M_buf(__buf), _M_ok(__buf) {}
  ostreambuf_iterator(ostream_type &__o)
      : _M_buf(__o.rdbuf()), _M_ok(__o.rdbuf() != 0) {}

  ostreambuf_iterator &operator=(char_type __c) {
    _M_ok = _M_ok &&
            !traits_type::eq_int_type(_M_buf->sputc(__c), traits_type::eof());
    return *this;
  }

  ostreambuf_iterator &operator*() { return *this; }
  ostreambuf_iterator &operator++() { return *this; }
  ostreambuf_iterator &operator++(int) { return *this; }

  bool failed() const { return !_M_ok; }

private:
  streambuf_type *_M_buf;
  bool _M_ok;
};

#else /* __STL_USE_NEW_IOSTREAMS */

template <class _Tp, class _Dist = ptrdiff_t> class istream_iterator;

template <class _Tp, class _Dist>
inline bool operator==(const istream_iterator<_Tp, _Dist> &,
                       const istream_iterator<_Tp, _Dist> &);

template <class _Tp, class _Dist> class istream_iterator {
#ifdef __STL_TEMPLATE_FRIENDS
  template <class _T1, class _D1>
  friend bool operator==(const istream_iterator<_T1, _D1> &,
                         const istream_iterator<_T1, _D1> &);
#else  /* __STL_TEMPLATE_FRIENDS */
  friend bool __STD_QUALIFIER operator==
      __STL_NULL_TMPL_ARGS(const istream_iterator &, const istream_iterator &);
#endif /* __STL_TEMPLATE_FRIENDS */

protected:
  istream *_M_stream;
  _Tp _M_value;
  bool _M_end_marker;
  void _M_read() {
    _M_end_marker = (*_M_stream) ? true : false;
    if (_M_end_marker)
      *_M_stream >> _M_value;
    _M_end_marker = (*_M_stream) ? true : false;
  }

public:
  typedef input_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef _Dist difference_type;
  typedef const _Tp *pointer;
  typedef const _Tp &reference;

  istream_iterator() : _M_stream(&cin), _M_end_marker(false) {}
  istream_iterator(istream &__s) : _M_stream(&__s) { _M_read(); }
  reference operator*() const { return _M_value; }
#ifndef __SGI_STL_NO_ARROW_OPERATOR
  pointer operator->() const { return &(operator*()); }
#endif /* __SGI_STL_NO_ARROW_OPERATOR */
  istream_iterator<_Tp, _Dist> &operator++() {
    _M_read();
    return *this;
  }
  istream_iterator<_Tp, _Dist> operator++(int) {
    istream_iterator<_Tp, _Dist> __tmp = *this;
    _M_read();
    return __tmp;
  }
};

#ifndef __STL_CLASS_PARTIAL_SPECIALIZATION

template <class _Tp, class _Dist>
inline input_iterator_tag
iterator_category(const istream_iterator<_Tp, _Dist> &) {
  return input_iterator_tag();
}

template <class _Tp, class _Dist>
inline _Tp *value_type(const istream_iterator<_Tp, _Dist> &) {
  return (_Tp *)0;
}

template <class _Tp, class _Dist>
inline _Dist *distance_type(const istream_iterator<_Tp, _Dist> &) {
  return (_Dist *)0;
}

#endif /* __STL_CLASS_PARTIAL_SPECIALIZATION */

template <class _Tp, class _Distance>
inline bool operator==(const istream_iterator<_Tp, _Distance> &__x,
                       const istream_iterator<_Tp, _Distance> &__y) {
  return (__x._M_stream == __y._M_stream &&
          __x._M_end_marker == __y._M_end_marker) ||
         __x._M_end_marker == false && __y._M_end_marker == false;
}

#ifdef __STL_FUNCTION_TMPL_PARTIAL_ORDER

template <class _Tp, class _Distance>
inline bool operator!=(const istream_iterator<_Tp, _Distance> &__x,
                       const istream_iterator<_Tp, _Distance> &__y) {
  return !(__x == __y);
}

#endif /* __STL_FUNCTION_TMPL_PARTIAL_ORDER */

template <class _Tp> class ostream_iterator {
protected:
  ostream *_M_stream;
  const char *_M_string;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;

  ostream_iterator(ostream &__s) : _M_stream(&__s), _M_string(0) {}
  ostream_iterator(ostream &__s, const char *__c)
      : _M_stream(&__s), _M_string(__c) {}
  ostream_iterator<_Tp> &operator=(const _Tp &__value) {
    *_M_stream << __value;
    if (_M_string)
      *_M_stream << _M_string;
    return *this;
  }
  ostream_iterator<_Tp> &operator*() { return *this; }
  ostream_iterator<_Tp> &operator++() { return *this; }
  ostream_iterator<_Tp> &operator++(int) { return *this; }
};

#ifndef __STL_CLASS_PARTIAL_SPECIALIZATION

template <class _Tp>
inline output_iterator_tag iterator_category(const ostream_iterator<_Tp> &) {
  return output_iterator_tag();
}

#endif /* __STL_CLASS_PARTIAL_SPECIALIZATION */

#endif /* __STL_USE_NEW_IOSTREAMS */

} // namespace std

#pragma GCC visibility pop

#endif
