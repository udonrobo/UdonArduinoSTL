#pragma once

#include <stddef.h>

namespace std
{
    using ::max_align_t;
    using ::nullptr_t;
    using ::ptrdiff_t;
    using ::size_t;
}    // namespace std

#if __cplusplus >= 201703L

namespace std    // purposefully not versioned
{
    enum class byte : unsigned char
    {
    };

    constexpr byte operator|(byte __lhs, byte __rhs) noexcept
    {
        return static_cast<byte>(
            static_cast<unsigned char>(
                static_cast<unsigned int>(__lhs) | static_cast<unsigned int>(__rhs)));
    }

    constexpr byte& operator|=(byte& __lhs, byte __rhs) noexcept
    {
        return __lhs = __lhs | __rhs;
    }

    constexpr byte operator&(byte __lhs, byte __rhs) noexcept
    {
        return static_cast<byte>(
            static_cast<unsigned char>(
                static_cast<unsigned int>(__lhs) & static_cast<unsigned int>(__rhs)));
    }

    constexpr byte& operator&=(byte& __lhs, byte __rhs) noexcept
    {
        return __lhs = __lhs & __rhs;
    }

    constexpr byte operator^(byte __lhs, byte __rhs) noexcept
    {
        return static_cast<byte>(
            static_cast<unsigned char>(
                static_cast<unsigned int>(__lhs) ^ static_cast<unsigned int>(__rhs)));
    }

    constexpr byte& operator^=(byte& __lhs, byte __rhs) noexcept
    {
        return __lhs = __lhs ^ __rhs;
    }

    constexpr byte operator~(byte __b) noexcept
    {
        return static_cast<byte>(
            static_cast<unsigned char>(
                ~static_cast<unsigned int>(__b)));
    }

    template <class _Tp>
    using _EnableByteOverload = __enable_if_t<is_integral<_Tp>::value, byte>;

    template <class _Integer>
    constexpr _EnableByteOverload<_Integer>&
    operator<<=(byte& __lhs, _Integer __shift) noexcept
    {
        return __lhs = __lhs << __shift;
    }

    template <class _Integer>
    constexpr _EnableByteOverload<_Integer>
    operator<<(byte __lhs, _Integer __shift) noexcept
    {
        return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) << __shift));
    }

    template <class _Integer>
    constexpr _EnableByteOverload<_Integer>&
    operator>>=(byte& __lhs, _Integer __shift) noexcept
    {
        return __lhs = __lhs >> __shift;
    }

    template <class _Integer>
    constexpr _EnableByteOverload<_Integer>
    operator>>(byte __lhs, _Integer __shift) noexcept
    {
        return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) >> __shift));
    }

    template <class _Integer, class = _EnableByteOverload<_Integer>>
    constexpr _Integer
    to_integer(byte __b) noexcept { return static_cast<_Integer>(__b); }

}    // namespace std

#endif    // __cplusplus >= 201703L